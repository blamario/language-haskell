#+OPTIONS: H:2 toc:nil
#+BEAMER_COLOR_THEME:
#+BEAMER_FONT_THEME:
#+BEAMER_HEADER:
#+BEAMER_INNER_THEME:
#+BEAMER_OUTER_THEME:
#+startup: beamer
#+latex_compiler: lualatex
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Singapore
#+BEAMER_HEADER: \usepackage{fontspec}\setmonofont[Scale=0.8]{Liberation Mono}

#+TITLE:     language-haskell (better name wanted!)
#+AUTHOR:    Mario Blazevic
#+DATE:      2025-06-06

* Introduction

** What it is
=https://hackage.haskell.org/package/language-haskell-0.1/candidate=
fits well into the general category of =language-X=
- AST, parser, and pretty-printer
- Haskell 2010 as the basis
- with /almost/ all syntactic extensions
- maximally flexible

** What it's for
- PoC of composable grammars
- alternative to =haskell-src-exts=
  - lower performance
  - but should be easier to maintain
- base for new Haskell implementation experiments
- also for Haskell derivatives
- reference grammar for Haskell 2030
- GHC bug report generator
- having fun

** What it's not for
- efficiency
  - parser combinators, no separate lexical layer
  - twice the number of AST heap objects
- good error messages
  - goal opposed to exact grammar
  - easier to do with lax grammar and AST verification
- teaching compiler techniques
  - very far from Simple Haskell

* Foundations

** Dependencies
[[file:dependencies.dot.pdf]]

** =monoid-subclasses=
- solid mathematical foundations
  - =FactorialMonoid=
  - =LeftCancellative=
  - =Monus=
- a practical input abstraction for parsers
  - efficient method collection
  - =TextualMonoid= sin bin
- several concrete monoids and transformers
  - =Data.Monoid.Instances.PrefixMemory=
  - =Data.Monoid.Instances.ByteString.UTF8=

** =input-parsers=
  - builds on the =parsers= library
  - exports only combinators and classes
    - =DeterministicParsing ((<<|>), takeOptional, takeMany)=
    - =InputParsing (type ParserInput, getInput, satisfy, string, take)=
    - =ConsumedInputParsing (match)=
    - =InputCharParsing (satisfyCharInput, takeCharsWhile)=
    - =Position (distance, move, offset)=
  - input constraints from =monoid-subclasses=

** =rank2classes=
  - the first, if not the original, HKD library
  - ~data Rec f = Rec{foo :​: f Int, bar :​: f Float}~
  - ~class Functor {(<$>) :​: (p ~> q) -> (g p -> g q)}~
    - ~type p ~> q = forall a. p a -> q a~
      - natural transformation
  - =Foldable=, =Traversable=
  - =Apply=, =Applicative=, =Distributive=, =Logistic=
  - =$(Rank2.TH.deriveAll ''Rec)=

** =grammatical-parsers=
  - some more classes and combinators
  - several different parser implementations
    - all instances of =input-parsers=
    - PEG parsers: backtracking and Packrat
    - context-free:
      - backtracking, parallel, continuation
      - transformer, memoizing, left-recursive
  - HKD grammars
    - ~data Grammar p = Grammar{prod1 :​: p Int, ...}~
    - ~fixGrammar :​: Distributive g => (g p -> g p) -> g p~
    - memoization of production results
    - =Rank2.liftA2 (<|>) g1 g2=

** =deep-transformations=
  - HKD has a problem with nesting \\
    =data Rec1 f = Rec1{child :: f (Rec2 f)}=
    - ASTs are very much nested
    - add another parameter \\
      =data Rec1 d s = Rec1{child :: s (Rec2 d d)}=
  - natural tranformations must behave uniformly \\
    ~type p ~> q = forall a. p a -> q a~
    - enter /unnatural/ transformations
    - from parametric to ad-hoc overloading \\
      =class Transformation t => t `At` a= \\
       =where ($) :​: t -> Domain t a -> Codomain t a=
    - attribute grammars

* Overview

** AST shape
[[file:equation.dot.pdf]]

** Modules
[[file:modules.dot.pdf]]

** Data flow
[[file:dataflow.dot.pdf]]

** Lines of Code
  - ~10k lines total
    - 1k for Haskell 2010 grammar
    - 2k for the extension grammar overlays
    - 1.3k for extended AST declarations

  - GHC in contrast:
    - 4.7k in =Parser.y=
    - 3.7k in =Lexer.x=

  - =haskell-src-exts= in contrast:
    - 2.3k in =InternalParser.ly=
    - 1.5k in =InternalLexer.hs=

** Test suite
  - ~3k source files stolen from GHC tests
  - ~81k LoC
  - positive tests only
  - 13 minutes with all the round-trips
[[file:testflow.dot.pdf]]

** Side effects
  - Forced improvements in dependencies
    - Performance of =monoid-subclasses= and =grammatical-parsers=
    - Comforts like =TraceableParsing=, state, and more combinators
    - Improved and expanded =deep-transformations= and =rank2classes=
  - Found and reported 34 issues in the GHC project
    - 19 in Template Haskell pretty printer, all fixed
    - 10 documentation issues, 6 of them fixed
** Future directions
  - documentation
  - modularize ~Extensions.Abstract~
  - add more extension reformulators
  - keep improving the parser
  - extend the compiler pipeline
    - type system as attribute grammar
  - more source-level transformations
** Questions?
